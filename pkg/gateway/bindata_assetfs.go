// Code generated by go-bindata.
// sources:
// assets/event.swagger.json
// assets/photo.swagger.json
// assets/user.swagger.json
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsEventSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x6e\xdb\x30\x0c\xbe\xfb\x29\x04\x6d\xc7\xa2\xe9\x8a\x61\x87\x9c\x06\x6c\xc3\xb0\xeb\x86\x9e\xd6\x22\x50\x6c\xc6\x51\x6b\x4b\x2a\x45\x67\x28\x8a\xbc\xfb\x20\x39\x8d\x65\xc7\x4e\x1d\x27\x70\x83\x61\x3d\x14\x8a\xf8\xe3\x8f\xe4\x27\x52\xf6\x73\xc4\x18\xb7\x7f\x44\x9a\x02\xf2\x29\xe3\xd7\x97\x57\xfc\xc2\xed\x49\xb5\xd0\x7c\xca\x9c\x9c\x31\x4e\x92\x32\x70\x72\x83\x9a\xf4\x04\x56\xa0\xa8\xfc\x7f\xe9\x77\xbc\x0d\x63\x7c\x05\x68\xa5\x56\x4e\x73\xb3\x64\x4a\x13\xb3\x40\x3c\x62\x6c\xed\x3d\xdb\x78\x09\x39\x58\x3e\x65\xbf\x4b\xa3\x25\x91\x79\x71\xe0\xd6\xd6\xe9\xde\x79\xdd\x58\x2b\x5b\xd4\x94\x85\x31\x99\x8c\x05\x49\xad\x26\xf7\x56\xab\x4a\xd7\xa0\x4e\x8a\xb8\xa7\xae\xa0\xa5\xad\xc2\x9b\xac\x3e\x94\xd1\x54\x7b\x8c\xf1\x14\x28\xf8\xc9\x18\xd7\x06\xd0\x7b\xfb\x91\xb8\x08\xbf\x03\x7d\x2b\x8d\x2e\x2a\x1d\x04\x6b\xb4\xb2\x60\x6b\xa6\x8c\xf1\xeb\xab\xab\xc6\x16\x63\x3c\x01\x1b\xa3\x34\xb4\xc9\x59\xe0\xc8\x8b\x7d\xaa\xc4\x8e\x19\x63\xfc\x3d\xc2\xc2\x59\xbc\x9b\x24\xb0\x90\x4a\x3a\x0f\xb6\x8c\x61\x0b\xeb\xe7\x06\x0a\xaf\x19\xaf\xa3\xb6\xf5\x3a\x08\xc1\x08\x14\x39\x10\x60\x95\xca\xf2\xaf\x01\x5e\x89\xdc\x73\xe2\xb1\x00\x7c\x6a\x42\x97\xaa\x53\x84\xf0\x58\x48\x04\x97\xc3\x85\xc8\x2c\x34\xc4\xf4\x64\xbc\x5b\x4b\x28\x55\x1a\x82\x5f\x5f\xbc\x0e\x66\x21\x33\x02\x1c\x05\xcd\x76\x7d\x17\x24\x8f\x44\xda\x4c\x1b\xf7\xe5\xf8\x05\xb8\x92\x71\x50\x8c\xbb\xa8\x11\x15\x37\xda\xee\x67\xdc\x17\x04\x41\xe0\xdd\x9d\x17\xe7\x02\x60\x63\xb1\x6e\xae\x93\x0e\xd2\xb5\x49\x82\x2a\x13\x16\xcd\x22\x1f\x1f\xf3\x63\x01\x96\xfa\x84\x7c\x24\x57\xa2\x20\x6d\x41\xdb\x9a\x3c\x27\x82\xc4\xa5\x4c\xd6\x61\x03\x33\x82\xe2\xe5\x5e\x42\xdd\x98\xe4\x3c\x09\x15\x00\x1b\x8b\x50\x9b\x0c\xb6\x73\xca\x0d\x8c\xc3\x38\x75\x5c\x1b\x7b\x73\x76\xd7\x0a\xf0\xe6\xec\x6e\x10\xbb\xef\x64\x3e\x2f\x4e\xbf\xa0\x1a\x8b\xd0\xa3\x70\xf9\xe4\x43\x30\x81\x0c\x08\xf6\x96\xf7\xab\x57\x39\xc3\x0a\x07\xc0\xfe\x17\xb9\xf3\x7c\x6f\xdf\x04\x82\xfc\x55\x77\xf1\xae\xd9\x1a\x1c\xff\x17\xa4\x7a\x7e\x0f\x71\x45\x01\xf7\x06\x60\x00\x49\x36\x18\xe0\x3b\x7b\x93\x13\x7b\xaa\x58\x12\x2b\x6a\x46\x5f\xef\x4e\x9d\xd7\x9e\x23\x70\xca\xa4\x89\xb2\xab\x26\x7b\x30\xb5\x71\xf0\x08\x4c\x80\xa8\xb1\x37\xac\x80\x1e\xfa\xa1\xcb\x6a\xae\x75\x06\x42\xd5\xd8\xc9\x17\x1a\x73\x41\xa1\xb8\x4f\xb0\x65\xa9\xc6\x49\x79\x10\x5b\xec\xeb\x9e\xcc\x04\x0d\xb1\x2e\xfc\x68\x1d\x6a\x6d\x49\x20\xcd\x9c\x87\x21\xd6\x9b\xb6\x71\x38\x66\x94\x43\xcc\x36\x3d\xa2\xd5\x4e\x20\x8a\xfa\x4d\x86\x4b\x82\xbc\xa9\xdf\xb3\x33\x85\x4f\x95\x76\x66\x8a\x79\x26\xed\x12\x3a\xcb\x7b\x30\x09\xc3\x64\x58\xd8\x39\x12\xed\xfd\xc4\x69\xde\x38\xed\x56\x3f\x79\xaa\x4f\x72\xe4\x77\x2e\x16\xe7\xd8\x2b\x77\x3f\x4b\x9c\x18\xe5\xe1\xbc\xea\x1f\x57\x17\xd3\x62\x5d\xa8\xd7\x4e\x71\x07\xc3\xa4\xa2\x4f\x1f\x7b\x65\xae\xe5\x2a\x7e\x8e\x05\x6e\x7b\x65\xfb\x17\x07\xcf\xf6\x4c\x8f\x3e\x76\x20\x17\x32\x1b\xb3\xeb\x1b\x19\x53\x81\xc3\x06\x8d\x8c\x1f\x86\x3e\xd6\x16\xf3\x21\x66\xd2\xce\x84\xd2\xea\x29\xd7\x45\xe7\xd0\xe9\x49\x81\x9a\x78\xfb\xf1\xfb\xb3\x54\xae\xbc\x33\x12\xe9\x94\xcd\xad\x56\xd3\xdb\xda\x43\x6f\x79\x27\x77\xdc\x9d\x37\x5a\x47\x7f\x03\x00\x00\xff\xff\xdf\xd7\x9e\x37\x6f\x17\x00\x00")

func assetsEventSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsEventSwaggerJson,
		"assets/event.swagger.json",
	)
}

func assetsEventSwaggerJson() (*asset, error) {
	bytes, err := assetsEventSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/event.swagger.json", size: 5999, mode: os.FileMode(420), modTime: time.Unix(1508251546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPhotoSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x06\x6c\x0f\x2d\x90\xda\x69\x50\xf4\xe0\x62\x81\x02\x5d\xa0\xd8\x5b\xd1\xee\x9e\xd6\x86\x41\x4b\x63\x99\x1b\x89\xc3\x90\xa3\xb8\xc1\xc2\xef\x5e\x90\xb2\x2d\x5a\x91\x1c\xd9\x4e\xbc\x3e\x34\x87\x40\xd6\xfc\xe8\x9b\x99\x6f\x86\x3f\x5f\x07\x00\xc2\xad\x64\x96\xa1\x15\x63\x10\x77\xc3\x5b\x71\xe3\xdf\x29\xbd\x20\x31\x06\x2f\x07\x10\xac\x38\x47\x2f\x37\x96\x98\x46\x66\xb9\xfb\x3f\x0c\x6f\x82\x0d\x80\x78\x44\xeb\x14\x69\xaf\xb9\x79\x04\x4d\x0c\x0e\x59\x0c\x00\xd6\xc1\xb3\x4b\x96\x58\xa0\x13\x63\xf8\x5c\x19\x2d\x99\xcd\xd6\x81\x7f\x76\x5e\x77\x1a\x74\x13\xd2\xae\xdc\x53\x96\xc6\xe4\x2a\x91\xac\x48\x8f\xbe\x38\xd2\xb5\xae\xb1\x94\x96\x49\x4f\x5d\xc9\x4b\x57\x87\x37\x7a\xfc\xb9\x8a\xa6\x7e\x07\x20\x32\xe4\xe8\x27\x80\x20\x83\x36\x78\xfb\x90\xfa\x08\xff\x44\xfe\xab\x32\xba\xa9\x75\x2c\x3a\x43\xda\xa1\xdb\x33\x05\x10\x77\xb7\xb7\x8d\x57\x00\x22\x45\x97\x58\x65\x78\x93\xb3\xc8\x51\x10\x87\x54\xc9\x67\x66\x00\xe2\x7b\x8b\x0b\x6f\xf1\xdd\x28\xc5\x85\xd2\xca\x7b\x70\x55\x0c\x3b\x58\x7f\x6f\xa0\x88\x3d\xe3\xf5\xa0\xed\x79\x1d\x85\x60\xa4\x95\x05\x32\xda\x3a\x95\xd5\x5f\x03\xbc\x96\x45\xe0\xc4\x43\x89\xf6\xa9\x09\x5d\xe9\x4e\x91\xc5\x87\x52\x59\xf4\x39\x5c\xc8\xdc\x61\x43\xcc\x4f\x26\xb8\x75\x6c\x95\xce\x62\xf0\xeb\x9b\x97\xc1\x18\x99\xe1\x9b\x61\x69\x48\x17\x64\x0b\xe9\x39\x22\x94\xe6\x5f\x7f\x39\x1a\x2a\xda\xd9\xb5\xc0\xdd\x3d\x4f\x23\x22\xb0\xcc\x9a\x14\x10\x81\x5a\xff\xa0\x7d\x54\x49\x44\xac\xe9\xa0\x11\xb6\x30\xe4\x0e\x77\xcf\x1f\x16\x25\x63\x70\x77\x5d\xfd\x13\x01\xbb\x54\x07\xcd\x29\xed\x68\xa0\x36\x49\x44\x02\xb6\x65\x93\x03\xe7\xc7\xfc\x50\xa2\xe3\x3e\x21\x9f\xc9\x95\x41\x94\xb6\x68\x04\x8f\xbe\xa6\x92\xe5\x50\xa5\xeb\x78\x18\x1b\xc9\xc9\xf2\x20\xa1\x3e\x99\xf4\x3a\x09\x15\x01\xbb\x14\xa1\x36\x19\x6c\xe7\x94\x5f\xfc\x8e\xe3\xd4\x79\x23\xf9\x9b\xb3\x7b\xaf\x00\xdf\x9c\xdd\x0d\x62\xf7\xdd\x65\x5c\x17\xa7\xb7\xa8\x2e\x45\xe8\x8b\x70\xf9\xd5\x17\xc1\x14\x73\x64\x3c\x58\xde\xf7\x41\xe5\x0a\x2b\x1c\x01\xfb\xbf\xc8\x9d\xfd\xbd\x3b\xd5\x44\xf9\xab\xcf\x15\x5d\x6b\x6b\xd4\xfe\x5b\xa4\x34\xff\x82\x09\x8b\x7a\xff\x64\x3d\x51\x58\x35\x18\x10\x26\x7b\x93\x13\x5b\x1f\xd2\x5a\xb9\x3f\x4f\x85\x62\x2c\x9a\x1c\x3a\x5c\xf7\x8a\x8a\xed\xb5\x6d\x9d\x6d\x9d\x9b\xa6\x33\xa2\x54\xe9\x33\xe2\x1f\x1f\x64\x1f\x12\x1c\x08\xa9\xad\x01\xce\x08\x89\xee\xbb\x22\x9a\x13\xe5\x28\xf5\x7e\x4c\xf5\x66\x7d\x2b\xee\x83\xf9\xd9\x58\x7e\x65\xa6\xf5\xe7\x4d\x0f\x90\xee\xad\x50\x5e\xac\x1f\xe2\x09\x42\x2c\xf3\x59\x42\xa5\xe6\x2e\x38\x2d\xa7\xb2\xee\x33\x59\xec\x5b\xe3\xbf\x2f\x39\x6d\xb5\xcb\xa5\x3b\xc9\x6e\xa1\xec\x69\x86\xc6\xe2\x63\x6f\xbb\x6e\x82\x54\x29\x3f\x6b\x7c\x1c\x53\x83\xdd\xe5\xd6\xe7\x1f\x32\xca\x28\x5c\x68\x0d\x93\xd2\x31\x15\x7e\x65\xfa\x11\xde\xc1\x44\x7c\x78\x3f\x11\xd3\xf6\xa8\x93\x30\xfb\xd2\x99\x3c\xaa\xf2\xbb\xaf\x7e\x5c\x2a\x07\x2b\x95\xe7\x20\x73\x47\xe1\xbe\x6c\x45\xf6\x1e\x56\x8a\x97\x90\x59\x93\xfc\x94\x49\xc6\x95\x7c\x9a\xe8\x8c\x28\xcb\xb1\xba\x72\x9b\x97\x8b\xe1\x47\x55\xa0\x63\x59\x18\xa8\x31\xc0\x3b\xb8\x83\x38\x92\x82\x2c\xfa\xf5\xad\x8a\x63\xee\x48\x8f\x27\x93\x49\x84\xda\xff\x9a\x88\x1b\x88\x6c\x1c\xa7\xac\xaa\xd0\xc3\xea\x1a\xcb\x74\x99\xe7\x72\x9e\x07\x61\xb8\x84\x98\xfe\xd6\x9e\x97\x32\x6c\xbb\x7b\xe4\xa5\x9d\xf4\xd5\xa6\xe0\x68\x3b\x67\x93\x53\xcc\x12\xb9\xdd\x3e\x1d\x6d\xaa\xdc\xcc\x94\xf3\x5c\xb9\x25\x76\xf2\xee\xe8\x19\xbf\xef\x5f\x6a\xd2\x4f\x05\x95\x9d\xab\xe2\x39\xfe\x4b\x17\xee\x7e\x7b\x0c\x7a\xaf\xf9\xc9\x6b\xb7\xfa\x29\x32\x7a\xb1\xf1\xfa\xb4\x7f\xcb\x71\xed\x1a\x97\xb1\xb6\x63\xfd\x15\xef\x0f\x76\xb5\x7b\xcb\xb9\xda\xca\x0b\x2c\xa4\xca\x2f\x39\x02\x8c\x4a\xb8\xb4\x27\x99\x6a\x95\xdc\x9f\x3c\x79\xca\xf9\x89\xe3\xe3\xb5\xda\xbb\x7d\x81\xf9\x5d\x69\x5f\xde\x19\xcb\x6c\x0c\xd5\xfc\xdf\xfb\xe8\x44\x74\x72\xc7\x1f\x6f\x06\xeb\xc1\x7f\x01\x00\x00\xff\xff\xe2\xf3\x73\x24\x26\x1a\x00\x00")

func assetsPhotoSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsPhotoSwaggerJson,
		"assets/photo.swagger.json",
	)
}

func assetsPhotoSwaggerJson() (*asset, error) {
	bytes, err := assetsPhotoSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/photo.swagger.json", size: 6694, mode: os.FileMode(420), modTime: time.Unix(1508251546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsUserSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xb1\x8e\xc3\x30\x08\x06\xe0\xdd\x4f\x81\x98\x4f\xc9\xe9\xc6\xbc\xca\xe9\x06\xcb\x21\x89\x4f\x29\x58\x86\xb4\x43\x94\x77\xaf\x70\x5a\x55\xdd\xba\x58\x18\x3e\x7e\xb1\x07\x00\xd4\x5b\x9c\x67\xaa\x38\x00\xfe\x74\xdf\xf8\xe5\xbd\xcc\x93\xe0\x00\x3e\x07\x40\xcb\xb6\x92\xcf\x4b\x15\x93\x7e\x53\xaa\xed\xe9\xda\xbf\x6d\x00\xe0\x95\xaa\x66\x61\x77\x8f\x12\x58\x0c\x94\x0c\x03\xc0\xd1\x72\x35\x2d\x74\x21\xc5\x01\x7e\xcf\xa5\xc5\xac\x3c\x03\xbc\x56\xb7\x7f\xcd\x26\x61\xdd\xde\x70\x2c\x65\xcd\x29\x5a\x16\xee\xff\x55\xf8\x65\x4b\x95\x71\x4b\x1f\xda\x68\x8b\xc3\xfd\x3c\x69\xa4\x29\x73\x76\x77\x36\xc3\x11\xee\x01\x00\x00\xff\xff\x1b\x25\x03\x11\x17\x01\x00\x00")

func assetsUserSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsUserSwaggerJson,
		"assets/user.swagger.json",
	)
}

func assetsUserSwaggerJson() (*asset, error) {
	bytes, err := assetsUserSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/user.swagger.json", size: 279, mode: os.FileMode(420), modTime: time.Unix(1508251546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/event.swagger.json": assetsEventSwaggerJson,
	"assets/photo.swagger.json": assetsPhotoSwaggerJson,
	"assets/user.swagger.json": assetsUserSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"event.swagger.json": &bintree{assetsEventSwaggerJson, map[string]*bintree{}},
		"photo.swagger.json": &bintree{assetsPhotoSwaggerJson, map[string]*bintree{}},
		"user.swagger.json": &bintree{assetsUserSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
