syntax = "proto3";
package event;

import "google/api/annotations.proto";
import "github.com/alextanhongpin/go-grpc-event/proto/user/user.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

service EventService {
  rpc GetEvents (GetEventsRequest) returns (GetEventsResponse) {
    option (google.api.http) = {
      get: "/v1/events"
    };
  }

  rpc GetEvent (GetEventRequest) returns (GetEventResponse) {
    option (google.api.http) = {
      get: "/v1/events/{id}"
    };
  }

  rpc CreateEvent (CreateEventRequest) returns (CreateEventResponse) {
    option (google.api.http) = {
      post: "/v1/events",
      body: "*"
    };
  }

  rpc UpdateEvent (UpdateEventRequest) returns (UpdateEventResponse) {
    option (google.api.http) = {
      patch: "/v1/events/{data.id}",
      body: "*"
    };
  }

  rpc DeleteEvent (DeleteEventRequest) returns (DeleteEventResponse) {
    option (google.api.http) = {
      delete: "/v1/events/{id}"
    };
  }
}

message Event {
  string id = 1;
  string created_at = 2 [(gogoproto.moretags) = "bson:\"created_at\" valid:\"rfc3339\""];
  string updated_at = 3 [(gogoproto.moretags) = "bson:\"updated_at\" valid:\"rfc3339\""];
  string start_date = 4 [(gogoproto.moretags) = "bson:\"start_date\" valid:\"rfc3339\""];
  string name = 5 [(gogoproto.moretags) = "bson:\"name\" valid:\"required~Name is required\""];
  string uri = 6 [(gogoproto.moretags) = "bson:\"uri\" valid:\"url,required~Url is required\""];
  repeated string tags = 7;
  bool is_published = 8 [(gogoproto.moretags) = "bson:\"is_published\""];
  grpc.user.User user = 10;
  
  string mgoid = 100 [(gogoproto.nullable) = false, (gogoproto.customtype) = "gopkg.in/mgo.v2/bson.ObjectId", (gogoproto.moretags) = "bson:\"_id,omitempty\"", (gogoproto.jsontag) = "-"];
}

message GetEventsRequest {
  string query = 1;
  string filter = 2;
}

message GetEventsResponse {
  repeated Event data = 1;
  int64 count = 2;
  // Add pagination
}

message GetEventRequest {
  string id = 1;
}

message GetEventResponse {
  Event data = 1;
}

message CreateEventRequest {
  Event data = 1;
}

message CreateEventResponse {
  string id = 1;
}

message UpdateEventRequest {
  Event data = 1;
}

message UpdateEventResponse {
  string error = 1;
  bool ok = 2;
}

message DeleteEventRequest {
  string id = 1;
}

message DeleteEventResponse {
  string error = 1;
  bool ok = 2;
}

