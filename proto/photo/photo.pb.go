// Code generated by protoc-gen-gogo.
// source: proto/photo/photo.proto
// DO NOT EDIT!

/*
	Package photo is a generated protocol buffer package.

	It is generated from these files:
		proto/photo/photo.proto

	It has these top-level messages:
		Photo
		GetPhotosRequest
		GetPhotosResponse
		GetPhotoRequest
		GetPhotoResponse
		CreatePhotoRequest
		CreatePhotoResponse
		UpdatePhotoRequest
		UpdatePhotoResponse
		DeletePhotoRequest
		DeletePhotoResponse
*/
package photo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import grpc_user "github.com/alextanhongpin/go-grpc-event/proto/user"
import _ "github.com/gogo/protobuf/gogoproto"

import gopkg_in_mgo_v2_bson "gopkg.in/mgo.v2/bson"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Photo struct {
	// [(gogoproto.customname) = "ID"]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"-"`
	// This will also not work with grpc-gateway
	// google.protobuf.Timestamp created_at = 2 [(gogoproto.moretags) = "bson:\"created_at\"", (gogoproto.stdtime) = true, (gogoproto.nullable) = false];
	CreatedAt   string                        `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at"`
	UpdatedAt   string                        `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" bson:"updated_at"`
	Name        string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Src         string                        `protobuf:"bytes,5,opt,name=src,proto3" json:"src,omitempty"`
	Caption     string                        `protobuf:"bytes,6,opt,name=caption,proto3" json:"caption,omitempty"`
	IsPublished bool                          `protobuf:"varint,7,opt,name=is_published,json=isPublished,proto3" json:"is_published,omitempty" bson:"is_published"`
	IsAnonymous bool                          `protobuf:"varint,8,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty" bson:"is_anonymous"`
	User        *grpc_user.User               `protobuf:"bytes,10,opt,name=user" json:"user,omitempty"`
	Mgoid       gopkg_in_mgo_v2_bson.ObjectId `protobuf:"bytes,100,opt,name=mgoid,proto3,customtype=gopkg.in/mgo.v2/bson.ObjectId" json:"-" bson:"_id,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{0} }

func (m *Photo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Photo) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Photo) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Photo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Photo) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *Photo) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *Photo) GetIsPublished() bool {
	if m != nil {
		return m.IsPublished
	}
	return false
}

func (m *Photo) GetIsAnonymous() bool {
	if m != nil {
		return m.IsAnonymous
	}
	return false
}

func (m *Photo) GetUser() *grpc_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetPhotosRequest struct {
	Query   string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page    int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage int64  `protobuf:"varint,3,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty" bson:"per_page"`
}

func (m *GetPhotosRequest) Reset()                    { *m = GetPhotosRequest{} }
func (m *GetPhotosRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPhotosRequest) ProtoMessage()               {}
func (*GetPhotosRequest) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{1} }

func (m *GetPhotosRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *GetPhotosRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetPhotosRequest) GetPerPage() int64 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type GetPhotosResponse struct {
	Data       []*Photo `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	TotalCount int64    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty" bson:"total_count"`
	Next       string   `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
	Last       string   `protobuf:"bytes,4,opt,name=last,proto3" json:"last,omitempty"`
	First      string   `protobuf:"bytes,5,opt,name=first,proto3" json:"first,omitempty"`
	Prev       string   `protobuf:"bytes,6,opt,name=prev,proto3" json:"prev,omitempty"`
}

func (m *GetPhotosResponse) Reset()                    { *m = GetPhotosResponse{} }
func (m *GetPhotosResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPhotosResponse) ProtoMessage()               {}
func (*GetPhotosResponse) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{2} }

func (m *GetPhotosResponse) GetData() []*Photo {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetPhotosResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetPhotosResponse) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *GetPhotosResponse) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *GetPhotosResponse) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *GetPhotosResponse) GetPrev() string {
	if m != nil {
		return m.Prev
	}
	return ""
}

type GetPhotoRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPhotoRequest) Reset()                    { *m = GetPhotoRequest{} }
func (m *GetPhotoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPhotoRequest) ProtoMessage()               {}
func (*GetPhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{3} }

func (m *GetPhotoRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPhotoResponse struct {
	Data *Photo `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetPhotoResponse) Reset()                    { *m = GetPhotoResponse{} }
func (m *GetPhotoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPhotoResponse) ProtoMessage()               {}
func (*GetPhotoResponse) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{4} }

func (m *GetPhotoResponse) GetData() *Photo {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreatePhotoRequest struct {
	Data []*Photo `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *CreatePhotoRequest) Reset()                    { *m = CreatePhotoRequest{} }
func (m *CreatePhotoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePhotoRequest) ProtoMessage()               {}
func (*CreatePhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{5} }

func (m *CreatePhotoRequest) GetData() []*Photo {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreatePhotoResponse struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *CreatePhotoResponse) Reset()                    { *m = CreatePhotoResponse{} }
func (m *CreatePhotoResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePhotoResponse) ProtoMessage()               {}
func (*CreatePhotoResponse) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{6} }

func (m *CreatePhotoResponse) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UpdatePhotoRequest struct {
	Data *Photo `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *UpdatePhotoRequest) Reset()                    { *m = UpdatePhotoRequest{} }
func (m *UpdatePhotoRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePhotoRequest) ProtoMessage()               {}
func (*UpdatePhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{7} }

func (m *UpdatePhotoRequest) GetData() *Photo {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdatePhotoResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *UpdatePhotoResponse) Reset()                    { *m = UpdatePhotoResponse{} }
func (m *UpdatePhotoResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdatePhotoResponse) ProtoMessage()               {}
func (*UpdatePhotoResponse) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{8} }

func (m *UpdatePhotoResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type DeletePhotoRequest struct {
	// This will not work with grpc-gateway
	// string id = 1 [(gogoproto.customname) = "ID"];
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeletePhotoRequest) Reset()                    { *m = DeletePhotoRequest{} }
func (m *DeletePhotoRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePhotoRequest) ProtoMessage()               {}
func (*DeletePhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{9} }

func (m *DeletePhotoRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeletePhotoResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *DeletePhotoResponse) Reset()                    { *m = DeletePhotoResponse{} }
func (m *DeletePhotoResponse) String() string            { return proto.CompactTextString(m) }
func (*DeletePhotoResponse) ProtoMessage()               {}
func (*DeletePhotoResponse) Descriptor() ([]byte, []int) { return fileDescriptorPhoto, []int{10} }

func (m *DeletePhotoResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Photo)(nil), "photo.Photo")
	proto.RegisterType((*GetPhotosRequest)(nil), "photo.GetPhotosRequest")
	proto.RegisterType((*GetPhotosResponse)(nil), "photo.GetPhotosResponse")
	proto.RegisterType((*GetPhotoRequest)(nil), "photo.GetPhotoRequest")
	proto.RegisterType((*GetPhotoResponse)(nil), "photo.GetPhotoResponse")
	proto.RegisterType((*CreatePhotoRequest)(nil), "photo.CreatePhotoRequest")
	proto.RegisterType((*CreatePhotoResponse)(nil), "photo.CreatePhotoResponse")
	proto.RegisterType((*UpdatePhotoRequest)(nil), "photo.UpdatePhotoRequest")
	proto.RegisterType((*UpdatePhotoResponse)(nil), "photo.UpdatePhotoResponse")
	proto.RegisterType((*DeletePhotoRequest)(nil), "photo.DeletePhotoRequest")
	proto.RegisterType((*DeletePhotoResponse)(nil), "photo.DeletePhotoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PhotoService service

type PhotoServiceClient interface {
	GetPhotos(ctx context.Context, in *GetPhotosRequest, opts ...grpc.CallOption) (*GetPhotosResponse, error)
	GetPhoto(ctx context.Context, in *GetPhotoRequest, opts ...grpc.CallOption) (*GetPhotoResponse, error)
	CreatePhoto(ctx context.Context, in *CreatePhotoRequest, opts ...grpc.CallOption) (*CreatePhotoResponse, error)
	UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, opts ...grpc.CallOption) (*UpdatePhotoResponse, error)
	DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoResponse, error)
}

type photoServiceClient struct {
	cc *grpc.ClientConn
}

func NewPhotoServiceClient(cc *grpc.ClientConn) PhotoServiceClient {
	return &photoServiceClient{cc}
}

func (c *photoServiceClient) GetPhotos(ctx context.Context, in *GetPhotosRequest, opts ...grpc.CallOption) (*GetPhotosResponse, error) {
	out := new(GetPhotosResponse)
	err := grpc.Invoke(ctx, "/photo.PhotoService/GetPhotos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) GetPhoto(ctx context.Context, in *GetPhotoRequest, opts ...grpc.CallOption) (*GetPhotoResponse, error) {
	out := new(GetPhotoResponse)
	err := grpc.Invoke(ctx, "/photo.PhotoService/GetPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) CreatePhoto(ctx context.Context, in *CreatePhotoRequest, opts ...grpc.CallOption) (*CreatePhotoResponse, error) {
	out := new(CreatePhotoResponse)
	err := grpc.Invoke(ctx, "/photo.PhotoService/CreatePhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, opts ...grpc.CallOption) (*UpdatePhotoResponse, error) {
	out := new(UpdatePhotoResponse)
	err := grpc.Invoke(ctx, "/photo.PhotoService/UpdatePhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...grpc.CallOption) (*DeletePhotoResponse, error) {
	out := new(DeletePhotoResponse)
	err := grpc.Invoke(ctx, "/photo.PhotoService/DeletePhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PhotoService service

type PhotoServiceServer interface {
	GetPhotos(context.Context, *GetPhotosRequest) (*GetPhotosResponse, error)
	GetPhoto(context.Context, *GetPhotoRequest) (*GetPhotoResponse, error)
	CreatePhoto(context.Context, *CreatePhotoRequest) (*CreatePhotoResponse, error)
	UpdatePhoto(context.Context, *UpdatePhotoRequest) (*UpdatePhotoResponse, error)
	DeletePhoto(context.Context, *DeletePhotoRequest) (*DeletePhotoResponse, error)
}

func RegisterPhotoServiceServer(s *grpc.Server, srv PhotoServiceServer) {
	s.RegisterService(&_PhotoService_serviceDesc, srv)
}

func _PhotoService_GetPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).GetPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.PhotoService/GetPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).GetPhotos(ctx, req.(*GetPhotosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_GetPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).GetPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.PhotoService/GetPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).GetPhoto(ctx, req.(*GetPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_CreatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).CreatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.PhotoService/CreatePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).CreatePhoto(ctx, req.(*CreatePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_UpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).UpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.PhotoService/UpdatePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).UpdatePhoto(ctx, req.(*UpdatePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.PhotoService/DeletePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).DeletePhoto(ctx, req.(*DeletePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhotoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "photo.PhotoService",
	HandlerType: (*PhotoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhotos",
			Handler:    _PhotoService_GetPhotos_Handler,
		},
		{
			MethodName: "GetPhoto",
			Handler:    _PhotoService_GetPhoto_Handler,
		},
		{
			MethodName: "CreatePhoto",
			Handler:    _PhotoService_CreatePhoto_Handler,
		},
		{
			MethodName: "UpdatePhoto",
			Handler:    _PhotoService_UpdatePhoto_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _PhotoService_DeletePhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/photo/photo.proto",
}

func (m *Photo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Photo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Src) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Src)))
		i += copy(dAtA[i:], m.Src)
	}
	if len(m.Caption) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Caption)))
		i += copy(dAtA[i:], m.Caption)
	}
	if m.IsPublished {
		dAtA[i] = 0x38
		i++
		if m.IsPublished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAnonymous {
		dAtA[i] = 0x40
		i++
		if m.IsAnonymous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.User != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Mgoid) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Mgoid)))
		i += copy(dAtA[i:], m.Mgoid)
	}
	return i, nil
}

func (m *GetPhotosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhotosRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(m.Page))
	}
	if m.PerPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(m.PerPage))
	}
	return i, nil
}

func (m *GetPhotosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhotosResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPhoto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.Next) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Next)))
		i += copy(dAtA[i:], m.Next)
	}
	if len(m.Last) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Last)))
		i += copy(dAtA[i:], m.Last)
	}
	if len(m.First) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.First)))
		i += copy(dAtA[i:], m.First)
	}
	if len(m.Prev) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Prev)))
		i += copy(dAtA[i:], m.Prev)
	}
	return i, nil
}

func (m *GetPhotoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhotoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GetPhotoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhotoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CreatePhotoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePhotoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPhoto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreatePhotoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePhotoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UpdatePhotoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhotoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *UpdatePhotoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhotoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeletePhotoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePhotoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *DeletePhotoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePhotoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Photo(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Photo(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPhoto(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Photo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Src)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Caption)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	if m.IsPublished {
		n += 2
	}
	if m.IsAnonymous {
		n += 2
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Mgoid)
	if l > 0 {
		n += 2 + l + sovPhoto(uint64(l))
	}
	return n
}

func (m *GetPhotosRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovPhoto(uint64(m.Page))
	}
	if m.PerPage != 0 {
		n += 1 + sovPhoto(uint64(m.PerPage))
	}
	return n
}

func (m *GetPhotosResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPhoto(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovPhoto(uint64(m.TotalCount))
	}
	l = len(m.Next)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Last)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.First)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Prev)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	return n
}

func (m *GetPhotoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	return n
}

func (m *GetPhotoResponse) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPhoto(uint64(l))
	}
	return n
}

func (m *CreatePhotoRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPhoto(uint64(l))
		}
	}
	return n
}

func (m *CreatePhotoResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovPhoto(uint64(l))
		}
	}
	return n
}

func (m *UpdatePhotoRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPhoto(uint64(l))
	}
	return n
}

func (m *UpdatePhotoResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *DeletePhotoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	return n
}

func (m *DeletePhotoResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func sovPhoto(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPhoto(x uint64) (n int) {
	return sovPhoto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Photo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Photo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Photo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Src = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublished = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnonymous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAnonymous = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &grpc_user.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mgoid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mgoid = gopkg_in_mgo_v2_bson.ObjectId(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhotosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhotosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhotosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerPage", wireType)
			}
			m.PerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhotosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhotosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhotosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Photo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Next = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhotoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhotoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhotoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhotoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhotoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhotoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Photo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePhotoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePhotoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePhotoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Photo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePhotoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePhotoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePhotoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhotoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhotoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhotoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Photo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhotoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhotoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhotoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePhotoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePhotoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePhotoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePhotoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePhotoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePhotoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhoto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPhoto
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPhoto
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPhoto(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPhoto = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhoto   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/photo/photo.proto", fileDescriptorPhoto) }

var fileDescriptorPhoto = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x5e, 0xc7, 0xcd, 0x36, 0x79, 0xa9, 0x36, 0xed, 0xa4, 0xdd, 0x78, 0x23, 0xa8, 0xc3, 0xc0,
	0x8a, 0x6a, 0x45, 0x6d, 0x11, 0x56, 0x20, 0x55, 0xe2, 0xd0, 0x2c, 0x12, 0xe2, 0x44, 0x35, 0xb0,
	0x12, 0x12, 0x42, 0x91, 0x13, 0xcf, 0xba, 0x43, 0x13, 0x8f, 0xd7, 0x33, 0x8e, 0xb6, 0x42, 0x7b,
	0xe1, 0x2f, 0x70, 0xe1, 0xe7, 0xc0, 0x6d, 0x8f, 0x48, 0xdc, 0x40, 0xb2, 0x50, 0xe1, 0xc4, 0x31,
	0xbf, 0x00, 0xcd, 0x8c, 0x9d, 0xb8, 0x49, 0x2a, 0x2e, 0xd1, 0x7b, 0xf3, 0xde, 0xf7, 0x7d, 0x33,
	0xef, 0x7b, 0x6e, 0xa1, 0x9b, 0xa4, 0x5c, 0x72, 0x3f, 0xb9, 0x5c, 0xfe, 0x7a, 0xfa, 0x04, 0xd5,
	0x75, 0xd2, 0x7b, 0x2b, 0xe2, 0x3c, 0x9a, 0x52, 0x3f, 0x48, 0x98, 0x1f, 0xc4, 0x31, 0x97, 0x81,
	0x64, 0x3c, 0x16, 0xa6, 0xa9, 0xf7, 0x69, 0xc4, 0xe4, 0x65, 0x36, 0xf6, 0x26, 0x7c, 0xe6, 0x07,
	0x53, 0xfa, 0x4a, 0x06, 0xf1, 0x25, 0x8f, 0xa3, 0x84, 0xc5, 0x7e, 0xc4, 0x4f, 0xa3, 0x34, 0x99,
	0x9c, 0xd2, 0x39, 0x8d, 0xa5, 0x6f, 0x54, 0x32, 0x41, 0x53, 0xfd, 0x53, 0xc0, 0x4f, 0x2b, 0xf0,
	0x88, 0x47, 0xdc, 0xb4, 0x8d, 0xb3, 0x17, 0x3a, 0x33, 0x18, 0x15, 0x99, 0x76, 0xfc, 0xab, 0x0d,
	0xf5, 0x0b, 0x75, 0x2b, 0x74, 0x04, 0x35, 0x16, 0x3a, 0x56, 0xdf, 0x3a, 0x69, 0x0e, 0xeb, 0xff,
	0xe6, 0xae, 0x75, 0x4a, 0x6a, 0x2c, 0x44, 0x4f, 0x01, 0x26, 0x29, 0x0d, 0x24, 0x0d, 0x47, 0x81,
	0x74, 0x6a, 0xba, 0x7c, 0xb4, 0xc8, 0xdd, 0x83, 0xb1, 0xe0, 0xf1, 0x19, 0x5e, 0xd5, 0x30, 0x69,
	0x16, 0xc9, 0xb9, 0x54, 0xa8, 0x2c, 0x09, 0x4b, 0x94, 0xbd, 0x8e, 0x5a, 0xd5, 0x30, 0x69, 0x16,
	0xc9, 0xb9, 0x44, 0x08, 0x76, 0xe2, 0x60, 0x46, 0x9d, 0x1d, 0xd5, 0x4f, 0x74, 0x8c, 0xf6, 0xc1,
	0x16, 0xe9, 0xc4, 0xa9, 0xeb, 0x23, 0x15, 0x22, 0x07, 0x76, 0x27, 0x41, 0xa2, 0x46, 0xe6, 0xdc,
	0xd7, 0xa7, 0x65, 0x8a, 0xce, 0x60, 0x8f, 0x89, 0x51, 0x92, 0x8d, 0xa7, 0x4c, 0x5c, 0xd2, 0xd0,
	0xd9, 0xed, 0x5b, 0x27, 0x8d, 0x61, 0x77, 0x91, 0xbb, 0x1d, 0xa3, 0x5b, 0xad, 0x62, 0xd2, 0x62,
	0xe2, 0xa2, 0xcc, 0x0a, 0x6c, 0x10, 0xf3, 0xf8, 0x7a, 0xc6, 0x33, 0xe1, 0x34, 0xb6, 0x60, 0x97,
	0x55, 0x8d, 0x3d, 0x2f, 0x33, 0xf4, 0x2e, 0xec, 0x28, 0x07, 0x1c, 0xe8, 0x5b, 0x27, 0xad, 0x41,
	0xdb, 0x53, 0x26, 0x79, 0xda, 0x93, 0xe7, 0x82, 0xa6, 0x44, 0x17, 0xd1, 0x37, 0x50, 0x9f, 0x45,
	0x9c, 0x85, 0x4e, 0xa8, 0xa7, 0x31, 0x7c, 0x93, 0xbb, 0xf7, 0xfe, 0xc8, 0xdd, 0xb7, 0x23, 0x9e,
	0x5c, 0x45, 0x1e, 0x8b, 0xfd, 0x59, 0xc4, 0xbd, 0xf9, 0xc0, 0x57, 0x6a, 0xde, 0x97, 0xe3, 0xef,
	0xe9, 0x44, 0x7e, 0x11, 0x6a, 0x1f, 0x16, 0xb9, 0x7b, 0x68, 0xee, 0x30, 0x62, 0xe1, 0x07, 0x7c,
	0xc6, 0x24, 0x9d, 0x25, 0xf2, 0x1a, 0x13, 0x43, 0x88, 0xa7, 0xb0, 0xff, 0x39, 0x95, 0xda, 0x45,
	0x41, 0xe8, 0xcb, 0x8c, 0x0a, 0x89, 0x0e, 0xa1, 0xfe, 0x32, 0xa3, 0xe9, 0xb5, 0x31, 0x94, 0x98,
	0x44, 0x0d, 0x38, 0x09, 0x22, 0xaa, 0x6d, 0xb4, 0x89, 0x8e, 0x91, 0x07, 0x8d, 0x84, 0xa6, 0x23,
	0x7d, 0xae, 0x8c, 0xb2, 0x87, 0x9d, 0x45, 0xee, 0xb6, 0x8d, 0x60, 0x59, 0xc1, 0x64, 0x37, 0xa1,
	0xe9, 0x85, 0x8a, 0x7e, 0xb1, 0xe0, 0xa0, 0x22, 0x27, 0x12, 0x1e, 0x0b, 0x8a, 0xfa, 0xb0, 0x13,
	0x06, 0x32, 0x70, 0xac, 0xbe, 0x7d, 0xd2, 0x1a, 0xec, 0x79, 0x66, 0xed, 0x75, 0x13, 0xd1, 0x15,
	0xf4, 0x09, 0xb4, 0x24, 0x97, 0xc1, 0x74, 0x34, 0xe1, 0x59, 0x6c, 0x36, 0xc9, 0x1e, 0x3e, 0x5c,
	0xe4, 0x2e, 0x32, 0x52, 0x95, 0x22, 0x26, 0xa0, 0xb3, 0x67, 0x2a, 0xd1, 0x5b, 0x41, 0x5f, 0x15,
	0x5b, 0x44, 0x74, 0xac, 0xce, 0xa6, 0x81, 0x90, 0xe5, 0xa6, 0xa8, 0x58, 0x3d, 0xf9, 0x05, 0x4b,
	0x85, 0x2c, 0x76, 0xc5, 0x24, 0xfa, 0xc9, 0x29, 0x9d, 0x17, 0xab, 0xa2, 0x63, 0xfc, 0x0e, 0xb4,
	0xcb, 0x17, 0x94, 0xf3, 0x7a, 0xb0, 0xda, 0x7e, 0xb5, 0xf6, 0xf8, 0xe9, 0x6a, 0xa6, 0x5b, 0xde,
	0x68, 0x6d, 0x7f, 0x23, 0xfe, 0x18, 0xd0, 0x33, 0xfd, 0x0d, 0xdc, 0xe2, 0xfe, 0xdf, 0xd9, 0xe0,
	0xf7, 0xa1, 0x73, 0x0b, 0x57, 0x08, 0xee, 0x83, 0xcd, 0x42, 0xa1, 0x71, 0x4d, 0xa2, 0x42, 0x25,
	0xf0, 0x5c, 0x7f, 0x2e, 0x77, 0x08, 0xdc, 0x75, 0xb1, 0xc7, 0xd0, 0xb9, 0x85, 0x2b, 0x04, 0x1e,
	0x40, 0x8d, 0x5f, 0x69, 0x58, 0x83, 0xd4, 0xf8, 0x15, 0x7e, 0x0f, 0xd0, 0x67, 0x74, 0x4a, 0xd7,
	0xe8, 0xd7, 0x67, 0xf3, 0x18, 0x3a, 0xb7, 0xba, 0xb6, 0x93, 0x0d, 0xfe, 0xb4, 0x61, 0x4f, 0x77,
	0x7c, 0x45, 0xd3, 0x39, 0x9b, 0x50, 0x44, 0xa0, 0xb9, 0x5c, 0x1c, 0xd4, 0x2d, 0x6e, 0xb9, 0xbe,
	0xb9, 0x3d, 0x67, 0xb3, 0x60, 0x04, 0x30, 0xfa, 0xf1, 0xf7, 0x7f, 0x7e, 0xaa, 0xed, 0x21, 0xf0,
	0xe7, 0x1f, 0x9a, 0xbf, 0xab, 0x02, 0x7d, 0x0d, 0x8d, 0xb2, 0x11, 0x3d, 0x5c, 0x43, 0x96, 0x8c,
	0xdd, 0x8d, 0xf3, 0x82, 0xb0, 0xab, 0x09, 0x0f, 0x50, 0x7b, 0x45, 0xe8, 0xff, 0xc0, 0xc2, 0xd7,
	0xe8, 0x5b, 0x68, 0x55, 0xfc, 0x40, 0x8f, 0x0a, 0x82, 0x4d, 0x6f, 0x7b, 0xbd, 0x6d, 0xa5, 0x82,
	0xfe, 0x48, 0xd3, 0xb7, 0x71, 0xe5, 0xbe, 0x67, 0xd6, 0x13, 0x44, 0xa1, 0x55, 0xf1, 0x62, 0x49,
	0xbe, 0xe9, 0xeb, 0x92, 0x7c, 0x8b, 0x75, 0xd8, 0xd5, 0xe4, 0x8f, 0x06, 0x87, 0xd5, 0xbb, 0x2b,
	0xaf, 0x3d, 0x16, 0xbe, 0x56, 0x32, 0xdf, 0x41, 0xab, 0xe2, 0xd2, 0x52, 0x66, 0xd3, 0xdf, 0xa5,
	0xcc, 0x16, 0x53, 0xcb, 0x11, 0x3d, 0x59, 0x1f, 0xd1, 0x70, 0xff, 0xcd, 0xcd, 0xb1, 0xf5, 0xdb,
	0xcd, 0xb1, 0xf5, 0xd7, 0xcd, 0xb1, 0xf5, 0xf3, 0xdf, 0xc7, 0xf7, 0xc6, 0xf7, 0xf5, 0x7f, 0x94,
	0x8f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xba, 0x66, 0x15, 0x46, 0xff, 0x06, 0x00, 0x00,
}
