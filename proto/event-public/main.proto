syntax = "proto3";
package eventpublic;

import "google/api/annotations.proto";
// import "proto/event-private/event-private.proto";

service EventService {
  
  rpc GetEvents (GetEventsRequest) returns (GetEventsResponse) {
    option (google.api.http) = {
      // Initial idea is to use public endpoints, but then the real
      // problem lies in the gateway when applying middlewares
      // get: "/public/v1/events"
      get: "/v1/events"
    };
  }
  rpc CreateEvent (CreateEventRequest) returns (CreateEventResponse) {
    option (google.api.http) = {
      post: "/v1/events",
      body: "*"
    };
  }

}

message Event {
  string id = 1;
  // @inject_tag: bson:"created_at"
  int64 created_at = 2;
  // @inject_tag: bson:"updated_at"
  int64 updated_at = 3;
  // @inject_tag: bson:"start_date"
  int64 start_date = 4;
  // @inject_tag: bson:"name"
  string name = 5;
  // @inject_tag: bson:"uri"
  string uri = 6;
  // @inject_tag: bson:"tags"
  repeated string tags = 7;
  // @inject_tag: bson:"is_published"
  bool is_published = 8;
}

message GetEventsRequest {
  string query = 1;
}

message GetEventsResponse {
  repeated Event data = 1;
}

message CreateEventRequest {
  Event data = 1;
}

message CreateEventResponse {
  string error = 1;
  bool ok = 2;
}

