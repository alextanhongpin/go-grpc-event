// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/event.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	proto/event.proto

It has these top-level messages:
	Event
	GetEventsRequest
	GetEventsResponse
	GetEventRequest
	GetEventResponse
	CreateEventRequest
	CreateEventResponse
	UpdateEventRequest
	UpdateEventResponse
	DeleteEventRequest
	DeleteEventResponse
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// @inject_tag: bson:"created_at"
	CreatedAt int64 `protobuf:"varint,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty" bson:"created_at"`
	// @inject_tag: bson:"updated_at"
	UpdatedAt int64 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty" bson:"updated_at"`
	// @inject_tag: bson:"start_date"
	StartDate int64 `protobuf:"varint,4,opt,name=start_date,json=startDate" json:"start_date,omitempty" bson:"start_date"`
	// @inject_tag: bson:"name"
	Name string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty" bson:"name"`
	// @inject_tag: bson:"uri"
	Uri string `protobuf:"bytes,6,opt,name=uri" json:"uri,omitempty" bson:"uri"`
	// @inject_tag: bson:"tags"
	Tags []string `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty" bson:"tags"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Event) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Event) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Event) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type GetEventsRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *GetEventsRequest) Reset()                    { *m = GetEventsRequest{} }
func (m *GetEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEventsRequest) ProtoMessage()               {}
func (*GetEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetEventsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type GetEventsResponse struct {
	Data []*Event `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *GetEventsResponse) Reset()                    { *m = GetEventsResponse{} }
func (m *GetEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEventsResponse) ProtoMessage()               {}
func (*GetEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetEventsResponse) GetData() []*Event {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetEventRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetEventRequest) Reset()                    { *m = GetEventRequest{} }
func (m *GetEventRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEventRequest) ProtoMessage()               {}
func (*GetEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetEventRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetEventResponse struct {
	Data *Event `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetEventResponse) Reset()                    { *m = GetEventResponse{} }
func (m *GetEventResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEventResponse) ProtoMessage()               {}
func (*GetEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetEventResponse) GetData() *Event {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateEventRequest struct {
	Data *Event `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CreateEventRequest) Reset()                    { *m = CreateEventRequest{} }
func (m *CreateEventRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEventRequest) ProtoMessage()               {}
func (*CreateEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateEventRequest) GetData() *Event {
	if m != nil {
		return m.Data
	}
	return nil
}

type CreateEventResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Ok    bool   `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
}

func (m *CreateEventResponse) Reset()                    { *m = CreateEventResponse{} }
func (m *CreateEventResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEventResponse) ProtoMessage()               {}
func (*CreateEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateEventResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CreateEventResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type UpdateEventRequest struct {
	Data *Event `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *UpdateEventRequest) Reset()                    { *m = UpdateEventRequest{} }
func (m *UpdateEventRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventRequest) ProtoMessage()               {}
func (*UpdateEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateEventRequest) GetData() *Event {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateEventResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Ok    bool   `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
}

func (m *UpdateEventResponse) Reset()                    { *m = UpdateEventResponse{} }
func (m *UpdateEventResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventResponse) ProtoMessage()               {}
func (*UpdateEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateEventResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *UpdateEventResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type DeleteEventRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteEventRequest) Reset()                    { *m = DeleteEventRequest{} }
func (m *DeleteEventRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEventRequest) ProtoMessage()               {}
func (*DeleteEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteEventRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteEventResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Ok    bool   `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
}

func (m *DeleteEventResponse) Reset()                    { *m = DeleteEventResponse{} }
func (m *DeleteEventResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteEventResponse) ProtoMessage()               {}
func (*DeleteEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteEventResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *DeleteEventResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Event)(nil), "main.Event")
	proto.RegisterType((*GetEventsRequest)(nil), "main.GetEventsRequest")
	proto.RegisterType((*GetEventsResponse)(nil), "main.GetEventsResponse")
	proto.RegisterType((*GetEventRequest)(nil), "main.GetEventRequest")
	proto.RegisterType((*GetEventResponse)(nil), "main.GetEventResponse")
	proto.RegisterType((*CreateEventRequest)(nil), "main.CreateEventRequest")
	proto.RegisterType((*CreateEventResponse)(nil), "main.CreateEventResponse")
	proto.RegisterType((*UpdateEventRequest)(nil), "main.UpdateEventRequest")
	proto.RegisterType((*UpdateEventResponse)(nil), "main.UpdateEventResponse")
	proto.RegisterType((*DeleteEventRequest)(nil), "main.DeleteEventRequest")
	proto.RegisterType((*DeleteEventResponse)(nil), "main.DeleteEventResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventService service

type EventServiceClient interface {
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResponse, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := grpc.Invoke(ctx, "/main.EventService/GetEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := grpc.Invoke(ctx, "/main.EventService/GetEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := grpc.Invoke(ctx, "/main.EventService/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error) {
	out := new(UpdateEventResponse)
	err := grpc.Invoke(ctx, "/main.EventService/UpdateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResponse, error) {
	out := new(DeleteEventResponse)
	err := grpc.Invoke(ctx, "/main.EventService/DeleteEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventService service

type EventServiceServer interface {
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResponse, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EventService/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EventService/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EventService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EventService/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EventService/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _EventService_GetEvents_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _EventService_GetEvent_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventService_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventService_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/event.proto",
}

func init() { proto.RegisterFile("proto/event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x96, 0xed, 0xa4, 0x7f, 0x33, 0xae, 0xfe, 0x34, 0xd3, 0xb4, 0x75, 0x23, 0x50, 0x83, 0xc5,
	0x21, 0xea, 0x21, 0x16, 0x29, 0x5c, 0xe8, 0x09, 0x51, 0xc4, 0x15, 0x19, 0x71, 0x40, 0x1c, 0xaa,
	0x25, 0x5e, 0x45, 0xab, 0xb6, 0xde, 0x74, 0xbd, 0x89, 0x84, 0x50, 0x2f, 0xbc, 0x02, 0xef, 0xc1,
	0xbb, 0x20, 0x5e, 0x81, 0x07, 0x41, 0x3b, 0xeb, 0xa5, 0xb6, 0x63, 0x09, 0xe5, 0x36, 0x3b, 0x33,
	0xdf, 0xf7, 0xcd, 0xce, 0xb7, 0x36, 0x0c, 0x96, 0x4a, 0x6a, 0x99, 0xf0, 0x35, 0xcf, 0xf5, 0x94,
	0x62, 0xec, 0xdc, 0x32, 0x91, 0x8f, 0x1e, 0x2d, 0xa4, 0x5c, 0xdc, 0xf0, 0x84, 0x2d, 0x45, 0xc2,
	0xf2, 0x5c, 0x6a, 0xa6, 0x85, 0xcc, 0x0b, 0xdb, 0x13, 0xff, 0xf0, 0xa0, 0xfb, 0xc6, 0x60, 0xf0,
	0x7f, 0xf0, 0x45, 0x16, 0x79, 0x63, 0x6f, 0xd2, 0x4b, 0x7d, 0x91, 0xe1, 0x63, 0x80, 0xb9, 0xe2,
	0x4c, 0xf3, 0xec, 0x8a, 0xe9, 0xc8, 0x1f, 0x7b, 0x93, 0x20, 0xed, 0x95, 0x99, 0x57, 0xda, 0x94,
	0x57, 0xcb, 0xcc, 0x95, 0x03, 0x5b, 0x2e, 0x33, 0xb6, 0x5c, 0x68, 0xa6, 0xf4, 0x95, 0x49, 0x44,
	0x1d, 0x5b, 0xa6, 0xcc, 0x25, 0xd3, 0x1c, 0x11, 0x3a, 0x39, 0xbb, 0xe5, 0x51, 0x97, 0xe4, 0x28,
	0xc6, 0x7d, 0x08, 0x56, 0x4a, 0x44, 0x3b, 0x94, 0x32, 0xa1, 0xe9, 0xd2, 0x6c, 0x51, 0x44, 0xff,
	0x8d, 0x03, 0xd3, 0x65, 0xe2, 0x78, 0x02, 0xfb, 0x6f, 0xb9, 0xa6, 0x91, 0x8b, 0x94, 0xdf, 0xad,
	0x78, 0xa1, 0x71, 0x08, 0xdd, 0xbb, 0x15, 0x57, 0x5f, 0xca, 0xe9, 0xed, 0x21, 0x7e, 0x0e, 0x83,
	0x4a, 0x67, 0xb1, 0x94, 0x79, 0xc1, 0xf1, 0x14, 0x3a, 0x19, 0xd3, 0x2c, 0xf2, 0xc6, 0xc1, 0x24,
	0x9c, 0x85, 0x53, 0xb3, 0xa2, 0x29, 0xf5, 0xa4, 0x54, 0x88, 0x9f, 0x40, 0xdf, 0xa1, 0x1c, 0x7d,
	0x63, 0x33, 0xf1, 0xf9, 0xc3, 0x08, 0x2d, 0xbc, 0x5e, 0x3b, 0xef, 0x0b, 0xc0, 0xd7, 0xb4, 0xbc,
	0x1a, 0xf5, 0x3f, 0x61, 0x17, 0x70, 0x50, 0x83, 0x95, 0x72, 0x43, 0xe8, 0x72, 0xa5, 0xa4, 0x72,
	0x37, 0xa6, 0x83, 0x19, 0x54, 0x5e, 0x93, 0x55, 0xbb, 0xa9, 0x2f, 0xaf, 0x8d, 0xe6, 0x07, 0x72,
	0x64, 0x6b, 0xcd, 0x1a, 0x6c, 0x2b, 0xcd, 0xa7, 0x80, 0x97, 0xfc, 0x86, 0x37, 0x34, 0x9b, 0x2b,
	0xbc, 0x80, 0x83, 0x5a, 0xd7, 0x36, 0x12, 0xb3, 0x9f, 0x01, 0xec, 0x11, 0xee, 0x3d, 0x57, 0x6b,
	0x31, 0xe7, 0xf8, 0x0e, 0x7a, 0x7f, 0x9d, 0xc6, 0x23, 0x7b, 0xa1, 0xe6, 0x23, 0x19, 0x1d, 0x6f,
	0xe4, 0xad, 0x68, 0x8c, 0xdf, 0x7e, 0xfd, 0xfe, 0xee, 0xef, 0x21, 0x24, 0xeb, 0x67, 0xf6, 0xfb,
	0x29, 0x30, 0x85, 0x5d, 0xd7, 0x88, 0x87, 0x75, 0xa0, 0xe3, 0x3b, 0x6a, 0xa6, 0x4b, 0xba, 0x63,
	0xa2, 0x1b, 0x60, 0xff, 0x81, 0x2e, 0xf9, 0x2a, 0xb2, 0x7b, 0xfc, 0x08, 0x61, 0xc5, 0x4a, 0x8c,
	0x2c, 0x7e, 0xf3, 0x51, 0x8c, 0x4e, 0x5a, 0x2a, 0x25, 0xf9, 0x21, 0x91, 0xf7, 0xe3, 0xca, 0xac,
	0x2f, 0xbd, 0x33, 0x9c, 0x43, 0x58, 0x71, 0xcc, 0x51, 0x6f, 0x7a, 0xef, 0xa8, 0x5b, 0xec, 0x8d,
	0x4f, 0x89, 0xfa, 0x64, 0x36, 0xac, 0xce, 0x6d, 0xde, 0xc3, 0x54, 0x64, 0xf7, 0x46, 0xe4, 0x13,
	0x84, 0x15, 0xcf, 0x9c, 0xc8, 0xa6, 0xd9, 0x4e, 0xa4, 0xc5, 0x60, 0xb7, 0x9c, 0xb3, 0xe6, 0x72,
	0x3e, 0xef, 0xd0, 0xef, 0xe8, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x9a, 0xd5, 0x12,
	0xc7, 0x04, 0x00, 0x00,
}
